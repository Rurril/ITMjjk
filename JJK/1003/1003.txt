백준 문제 1003번

다음 소스는 N번째 피보나치 수를 구하는 C++ 함수이다.

int fibonacci(int n) {
    if (n == 0) {
        printf("0");
        return 0;
    } else if (n == 1) {
        printf("1");
        return 1;
    } else {
        return fibonacci(n‐1) + fibonacci(n‐2);
    }
}
fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.

fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
fibonacci(0)은 0을 출력하고, 0을 리턴한다.
fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.
1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.

의 문제
---
---

첫 접근은 저 위의 피보나치 함수를 이용해서 n==0 과 n==1의 if문에 들어갈 때 static 변수를 통해서 카운팅을 하는 방식이었다.
결과적으로 접근 방식은 단순하게 생각해서 카운팅이 제대로 이루어질지는 모르겠으나, 시간제한 0.25초에 걸려서 시간초과가 되어버리고 말았다.

그리고 나서 결과 표를 그리면서 확인해보니, n에 따라서 0과 1의 추출 빈도수가 n=0 일때를 제외하고는 0을 출력하는 것은 fibonacci(n-1)
1을 출력하는 것은 fibonacci(n)이라는 것을 알 수 있었다.
주어지는 n의 값에 대해서 '0 < n <= 40' 이라는 조건이 있기에, 가능한 값들을 fibonacci 주어진 함수를 이용해서 값을 저장하고 그것을 호출하는 식으로
코드를 짰다.
하지만 첫 접근이랑 마찬가지로 시간초과가 되버렸다.

어떤 접근이 잘못됬을까 고민을 하다가, 배열에 값을 저장하기 위해서 계속해서 fibonacci 함수를 이용해서 값을 얻어내고 저장한 것이 비효율적이라는 것을 알 수
있었다. 결국 2차원 배열로 준비해서 전에 있던 배열의 값을 참조하여 계속해서 값을 늘려가는 방식으로 배열에 저장하고 그것을 테스트 케이스에서 필요하다면
불러오는 방식을 취함으로써 문제를 맞출 수 있었다.

---

피보나치 함수가 가장 기본적인 다이나믹 프로그래밍의 문제라고 한다. 큰 문제를 작은 문제에 접근한 방식과 동일한 방식으로 접근할 수 있고 풀 수 있어야 한다.

쉽지만 시간초과라는 제한이 걸려있는 문제를 풀어본건 처음이라서 너무 간단하게 접근하는 것만이 전부가 아니라는 것을 배웠다.
공부할 점이 많지만, 시간복잡도 개념에서 좀 더 가볍고 빠른 코드를 만들어내는 것의 중요함을 다시 일깨워줬다. 
